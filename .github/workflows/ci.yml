name: Continuous Integration
on:
  workflow_dispatch:
  repository_dispatch:
    types: run-commit-tests
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize]
    branches:
      - master

env:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  CMAKE_VERSION: "3.6.1"

jobs:
  java-build:
    name: Java ${{ matrix.java }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        java: [ '8', '11', '16', '17-ea' ]
        os: [ 'ubuntu-20.04', 'windows-latest' ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-caches-
      - name: Cache Gradle wrappers
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
      - name: Setup java
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: Setup BUILD_JAVA_HOME & BUILD_JAVA_VERSION (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "BUILD_JAVA_HOME=${JAVA_HOME}" >> $GITHUB_ENV
          echo "BUILD_JAVA_VERSION=${{ matrix.java }}" >> $GITHUB_ENV
      - name: Setup BUILD_JAVA_HOME & BUILD_JAVA_VERSION (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "BUILD_JAVA_HOME=$env:JAVA_HOME" | Out-File $env:GITHUB_ENV -Encoding utf8 -Append
          echo "BUILD_JAVA_VERSION=${{ matrix.java }}" | Out-File $env:GITHUB_ENV -Encoding utf8 -Append
      - name: Setup java 8 to run the Gradle script
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Build with Gradle
        run: java -version && ./gradlew
      - name: Copy test logs
        id: copy_test_logs
        if: failure()
        run: |
          echo "::set-output name=dir::build/test_logs"

          ./gradlew copyTestLogs
      - name: Upload crash logs
        if: always() && steps.copy_test_logs.outputs.dir == 'build/test_logs'
        uses: actions/upload-artifact@v2
        with:
          name: crash-logs-${{ matrix.os }}-java-${{ matrix.java }}
          path: ${{ steps.copy_test_logs.outputs.dir }}

  java-topology-build:
    name: Java Topology Tests (JDK ${{ matrix.java }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        java: [ '8' ]
        os: [ 'ubuntu-20.04' ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-caches-
      - name: Cache Gradle wrappers
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
      - name: Setup java
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: Setup BUILD_JAVA_HOME & BUILD_JAVA_VERSION
        run: |
          echo "BUILD_JAVA_HOME=${JAVA_HOME}" >> $GITHUB_ENV
          echo "BUILD_JAVA_VERSION=${{ matrix.java }}" >> $GITHUB_ENV
      - name: Setup virtual network interfaces
        run: ./aeron-samples/scripts/cluster/setup-namespaces
      - name: Build aeron with Gradle
        run: ./gradlew clean assemble -x javadoc
      - name: Run execution agents
        working-directory: ./aeron-samples/scripts/cluster
        run: ./agent-ns
      - name: Get network information
        run:  |
          sudo sysctl -w net.ipv4.ip_forward=1
          sudo iptables -F FORWARD
          sudo iptables -P FORWARD ACCEPT
      - name: Run topology tests with Gradle
        run: ./gradlew topologyTest
        env:
          BUILD_JAVA_VERSION: ${{ matrix.java }}
      - name: Copy test logs
        id: copy_test_logs
        if: failure()
        run: |
          echo "::set-output name=dir::build/test_logs"

          ./gradlew copyTestLogs
      - name: Upload crash logs
        if: always() && steps.copy_test_logs.outputs.dir == 'build/test_logs'
        uses: actions/upload-artifact@v2
        with:
          name: crash-logs-topology-${{ matrix.os }}-java-${{ matrix.java }}
          path: ${{ steps.copy_test_logs.outputs.dir }}

  cpp-gcc-build:
    name: C++ GCC ${{ matrix.version }}
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        version: [ '6', '7', '8', '9', '10' ]
    env:
      CC: gcc-${{ matrix.version }}
      CXX: g++-${{ matrix.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-caches-
      - name: Cache Gradle wrappers
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
      - name: Setup java 8 to run the Gradle script
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Setup BUILD_JAVA_HOME & BUILD_JAVA_VERSION
        run: |
         echo "BUILD_JAVA_HOME=${JAVA_HOME}" >> $GITHUB_ENV
         echo "BUILD_JAVA_VERSION=8" >> $GITHUB_ENV
      - name: Install compiler
        run: |
         sudo add-apt-repository "deb http://dk.archive.ubuntu.com/ubuntu/ bionic main universe"
         sudo apt-get update
         sudo apt-get install -y g++-${{ matrix.version }} libbsd-dev uuid-dev libidn11
         curl -O -L https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz
         tar xf cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz
         echo "cmake-${CMAKE_VERSION}-Linux-x86_64/bin" >> $GITHUB_PATH
      - name: Build
        run: cmake --version && java -version && cppbuild/cppbuild --c-warnings-as-errors --cxx-warnings-as-errors
      - name: Copy test logs
        id: copy_test_logs
        if: failure()
        run: |
          echo "::set-output name=dir::build/test_logs"

          ./gradlew copyTestLogs
      - name: Upload crash logs
        if: always() && steps.copy_test_logs.outputs.dir == 'build/test_logs'
        uses: actions/upload-artifact@v2
        with:
          name: crash-logs-gcc-${{ matrix.version }}
          path: ${{ steps.copy_test_logs.outputs.dir }}

  cpp-gcc-centos-build:
    name: C++ CentOS devtoolset-${{ matrix.version }}
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        version: [ '7' ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-caches-
      - name: Cache Gradle wrappers
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
      - name: Build
        run: java -version && cppbuild/centos-docker-build ${{ matrix.version }}
      - name: Copy test logs
        id: copy_test_logs
        if: failure()
        run: |
          echo "::set-output name=dir::build/test_logs"

          ./gradlew copyTestLogs
      - name: Upload crash logs
        if: always() && steps.copy_test_logs.outputs.dir == 'build/test_logs'
        uses: actions/upload-artifact@v2
        with:
          name: crash-logs-gcc-centos-${{ matrix.version }}
          path: ${{ steps.copy_test_logs.outputs.dir }}

  cpp-clang-build:
    name: C++ Clang ${{ matrix.version }}
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        version: [ '6.0', '7', '8', '9', '10', '11' ]
    env:
      CC: clang-${{ matrix.version }}
      CXX: clang++-${{ matrix.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-caches-
      - name: Cache Gradle wrappers
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
      - name: Setup java 8 to run the Gradle script
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Setup BUILD_JAVA_HOME & BUILD_JAVA_VERSION
        run: |
          echo "BUILD_JAVA_HOME=${JAVA_HOME}" >> $GITHUB_ENV
          echo "BUILD_JAVA_VERSION=8" >> $GITHUB_ENV
      - name: Install compiler
        run: |
          curl -L https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-${{ matrix.version }} main"
          sudo apt-get update
          sudo apt-get install -y clang-${{ matrix.version }} libstdc++-7-dev libbsd-dev uuid-dev libidn11
          curl -O -L https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz
          tar xf cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz
          echo "cmake-${CMAKE_VERSION}-Linux-x86_64/bin" >> $GITHUB_PATH
      - name: Build
        run: cmake --version && java -version && cppbuild/cppbuild --c-warnings-as-errors --cxx-warnings-as-errors
      - name: Copy test logs
        id: copy_test_logs
        if: failure()
        run: |
          echo "::set-output name=dir::build/test_logs"

          ./gradlew copyTestLogs
      - name: Upload crash logs
        if: always() && steps.copy_test_logs.outputs.dir == 'build/test_logs'
        uses: actions/upload-artifact@v2
        with:
          name: crash-logs-clang-${{ matrix.version }}
          path: ${{ steps.copy_test_logs.outputs.dir }}

  cpp-clang-debug-build:
    name: C++ Clang ${{ matrix.version }} debug build
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        version: [ '7' ]
    env:
      CC: clang-${{ matrix.version }}
      CXX: clang++-${{ matrix.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-caches-
      - name: Cache Gradle wrappers
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
      - name: Setup java 8 to run the Gradle script
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Setup BUILD_JAVA_HOME & BUILD_JAVA_VERSION
        run: |
          echo "BUILD_JAVA_HOME=${JAVA_HOME}" >> $GITHUB_ENV
          echo "BUILD_JAVA_VERSION=8" >> $GITHUB_ENV
      - name: Install compiler
        run: |
          curl -L https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-${{ matrix.version }} main"
          sudo apt-get update
          sudo apt-get install -y clang-${{ matrix.version }} libstdc++-7-dev libbsd-dev uuid-dev libidn11
          curl -O -L https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz
          tar xf cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz
          echo "cmake-${CMAKE_VERSION}-Linux-x86_64/bin" >> $GITHUB_PATH
      - name: Build
        run: cmake --version && java -version && cppbuild/cppbuild --debug-build
      - name: Copy test logs
        id: copy_test_logs
        if: failure()
        run: |
          echo "::set-output name=dir::build/test_logs"

          ./gradlew copyTestLogs
      - name: Upload crash logs
        if: always() && steps.copy_test_logs.outputs.dir == 'build/test_logs'
        uses: actions/upload-artifact@v2
        with:
          name: crash-logs-clang-debug-${{ matrix.version }}
          path: ${{ steps.copy_test_logs.outputs.dir }}

  cpp-xcode-build:
    name: C++ Xcode (macOS)
    runs-on: macOS-latest
    strategy:
      fail-fast: false
    env:
      CC: clang
      CXX: clang++
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-caches-
      - name: Cache Gradle wrappers
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
      - name: Setup java 8 to run the Gradle script
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Setup BUILD_JAVA_HOME & BUILD_JAVA_VERSION
        run: |
          echo "BUILD_JAVA_HOME=${JAVA_HOME}/zulu-8.jdk/Contents/Home" >> $GITHUB_ENV
          echo "BUILD_JAVA_VERSION=8" >> $GITHUB_ENV
      - name: Install CMake
        run: |
          curl -O -L https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-Darwin-x86_64.tar.gz
          tar xf cmake-${CMAKE_VERSION}-Darwin-x86_64.tar.gz
          echo "cmake-${CMAKE_VERSION}-Darwin-x86_64/CMake.app/Contents/bin" >> $GITHUB_PATH
      - name: Build
        run: cmake --version && java -version && cppbuild/cppbuild --c-warnings-as-errors --cxx-warnings-as-errors
      - name: Copy test logs
        id: copy_test_logs
        if: failure()
        run: |
          echo "::set-output name=dir::build/test_logs"

          ./gradlew copyTestLogs
      - name: Upload crash logs
        if: always() && steps.copy_test_logs.outputs.dir == 'build/test_logs'
        uses: actions/upload-artifact@v2
        with:
          name: crash-logs-xcode-latest
          path: ${{ steps.copy_test_logs.outputs.dir }}

  cpp-msvc-build:
    name: C++ MSVC (Windows)
    runs-on: windows-latest
    strategy:
      fail-fast: false
    env:
      CC: cl
      CXX: cl
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-caches-
      - name: Cache Gradle wrappers
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
      - name: Setup java 8 to run the Gradle script
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Setup BUILD_JAVA_HOME & BUILD_JAVA_VERSION
        run: |
          echo "BUILD_JAVA_HOME=$env:JAVA_HOME" | Out-File $env:GITHUB_ENV -Encoding utf8 -Append
          echo "BUILD_JAVA_VERSION=8" | Out-File $env:GITHUB_ENV -Encoding utf8 -Append
      - name: Install CMake
        run: |
          $client = new-object System.Net.WebClient
          $client.DownloadFile("https://github.com/Kitware/CMake/releases/download/v$Env:CMAKE_VERSION/cmake-$Env:CMAKE_VERSION-win64-x64.zip","cmake-$Env:CMAKE_VERSION-win64-x64.zip")
          7z x cmake-$Env:CMAKE_VERSION-win64-x64.zip
          echo "cmake-$Env:CMAKE_VERSION-win64-x64/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8
      - name: Build
        run: cmake --version && java -version && cppbuild/cppbuild
      - name: Copy test logs
        id: copy_test_logs
        if: failure()
        run: |
          echo "::set-output name=dir::build/test_logs"

          ./gradlew copyTestLogs
      - name: Upload crash logs
        if: always() && steps.copy_test_logs.outputs.dir == 'build/test_logs'
        uses: actions/upload-artifact@v2
        with:
          name: crash-logs-msvc-latest
          path: ${{ steps.copy_test_logs.outputs.dir }}
